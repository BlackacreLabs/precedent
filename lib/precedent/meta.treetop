module Precedent
  grammar Meta
    rule meta
      first:property more:("\n" prop:property)*
      {
        def build
          {
            :type => :meta,
            :content => more.elements.reduce(first.build) { |mem, e|
              mem.merge(e.prop.build)
            }
          }
        end
      }
    end

    rule property
      key:([A-Z] [a-zA-Z]+) ':' ' '+ value:[^\n]+
      {
        def build
          return { key.text_value.to_sym => interpreted_value }
        end

        def interpreted_value
          v = value.text_value.strip
          case v
          when /^\d+$/
            v.to_i
          when /^\d\d\d\d-\d\d-\d\d$/
            Date.parse(v)
          when /^true|yes$/i
            true
          when /^false|no$/i
            false
          else
            v
          end
        end
      }
    end
  end
end
