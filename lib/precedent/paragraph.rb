# encoding: utf-8
# Autogenerated from a Treetop grammar. Edits may be lost.


#encoding: UTF-8
require File.dirname(__FILE__) + '/inline'

module Precedent
  module Paragraph
    include Treetop::Runtime

    def root
      @root ||= :paragraph
    end

    include Inline

    def _nt_paragraph
      start_index = index
      if node_cache[:paragraph].has_key?(index)
        cached = node_cache[:paragraph][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_horizontal_rule
      if r1
        r0 = r1
      else
        r2 = _nt_ragged_left
        if r2
          r0 = r2
        else
          r3 = _nt_quote
          if r3
            r0 = r3
          else
            r4 = _nt_footnote
            if r4
              r0 = r4
            else
              r5 = _nt_indented
              if r5
                r0 = r5
              else
                r6 = _nt_flush
                if r6
                  r0 = r6
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end

      node_cache[:paragraph][start_index] = r0

      r0
    end

    module HorizontalRule0
    end

    module HorizontalRule1
      def build
        { :type => :rule }
      end
    end

    def _nt_horizontal_rule
      start_index = index
      if node_cache[:horizontal_rule].has_key?(index)
        cached = node_cache[:horizontal_rule][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('* * *', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('* * *')
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?("\n", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(HorizontalRule0)
        r0.extend(HorizontalRule1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:horizontal_rule][start_index] = r0

      r0
    end

    module RaggedLeft0
      def content
        elements[1]
      end
    end

    module RaggedLeft1
      def build
        { :type => :ragged_left, :content => content.build }
      end
    end

    def _nt_ragged_left
      start_index = index
      if node_cache[:ragged_left].has_key?(index)
        cached = node_cache[:ragged_left][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('        ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('        ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(RaggedLeft0)
        r0.extend(RaggedLeft1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ragged_left][start_index] = r0

      r0
    end

    module Indented0
      def content
        elements[1]
      end
    end

    module Indented1
      def build
        { :type => :indented, :content => content.build }
      end
    end

    def _nt_indented
      start_index = index
      if node_cache[:indented].has_key?(index)
        cached = node_cache[:indented][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('  ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('  ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Indented0)
        r0.extend(Indented1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indented][start_index] = r0

      r0
    end

    module Flush0
      def content
        elements[1]
      end
    end

    module Flush1
      def build
        { :type => :flush, :content => content.build }
      end
    end

    def _nt_flush
      start_index = index
      if node_cache[:flush].has_key?(index)
        cached = node_cache[:flush][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?(' ', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r2 = nil
      end
      if r2
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_inline
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Flush0)
        r0.extend(Flush1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:flush][start_index] = r0

      r0
    end

    module Footnote0
      def content
        elements[2]
      end

      def block_end
        elements[3]
      end
    end

    module Footnote1
      def marker
        elements[1]
      end

      def first_content
        elements[3]
      end

      def block_end
        elements[4]
      end

      def additional
        elements[5]
      end
    end

    module Footnote2
      def build
        {
          :type => :footnote,
          :marker => marker.text_value,
          :content => [
            { :type => :indented, :content => first_content.build }
          ] + additional.elements.map { |e|
            { :type => :indented, :content => e.content.build }
          }
        }
      end
    end

    def _nt_footnote
      start_index = index
      if node_cache[:footnote].has_key?(index)
        cached = node_cache[:footnote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('^', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('^')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[0-9*†‡]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        if s2.empty?
          @index = i2
          r2 = nil
        else
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          if s4.empty?
            @index = i4
            r4 = nil
          else
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          end
          s0 << r4
          if r4
            r6 = _nt_inline
            s0 << r6
            if r6
              r7 = _nt_block_end
              s0 << r7
              if r7
                s8, i8 = [], index
                loop do
                  i9, s9 = index, []
                  if has_terminal?('^', false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('^')
                    r10 = nil
                  end
                  s9 << r10
                  if r10
                    s11, i11 = [], index
                    loop do
                      if has_terminal?(' ', false, index)
                        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(' ')
                        r12 = nil
                      end
                      if r12
                        s11 << r12
                      else
                        break
                      end
                    end
                    if s11.empty?
                      @index = i11
                      r11 = nil
                    else
                      r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    end
                    s9 << r11
                    if r11
                      r13 = _nt_inline
                      s9 << r13
                      if r13
                        r14 = _nt_block_end
                        s9 << r14
                      end
                    end
                  end
                  if s9.last
                    r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                    r9.extend(Footnote0)
                  else
                    @index = i9
                    r9 = nil
                  end
                  if r9
                    s8 << r9
                  else
                    break
                  end
                end
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                s0 << r8
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Footnote1)
        r0.extend(Footnote2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:footnote][start_index] = r0

      r0
    end

    module Quote0
      def elem
        elements[0]
      end

      def block_end
        elements[1]
      end
    end

    module Quote1
      def build
        {
          :type => :quote,
          :content => elements.map {|e| e.elem.build }
        }
      end
    end

    def _nt_quote
      start_index = index
      if node_cache[:quote].has_key?(index)
        cached = node_cache[:quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1, s1 = index, []
        i2 = index
        r3 = _nt_indented_rule
        if r3
          r2 = r3
        else
          r4 = _nt_indented_quote
          if r4
            r2 = r4
          else
            r5 = _nt_flush_quote
            if r5
              r2 = r5
            else
              @index = i2
              r2 = nil
            end
          end
        end
        s1 << r2
        if r2
          r6 = _nt_block_end
          s1 << r6
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Quote0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Quote1)
      end

      node_cache[:quote][start_index] = r0

      r0
    end

    module IndentedRule0
    end

    module IndentedRule1
      def build
        { :type => :rule }
      end
    end

    def _nt_indented_rule
      start_index = index
      if node_cache[:indented_rule].has_key?(index)
        cached = node_cache[:indented_rule][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('    * * *', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
        @index += 9
      else
        terminal_parse_failure('    * * *')
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?("\n", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(IndentedRule0)
        r0.extend(IndentedRule1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indented_rule][start_index] = r0

      r0
    end

    module FlushQuote0
      def content
        elements[1]
      end
    end

    module FlushQuote1
      def build
        { :type => :flush, :content => content.build }
      end
    end

    def _nt_flush_quote
      start_index = index
      if node_cache[:flush_quote].has_key?(index)
        cached = node_cache[:flush_quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('    ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('    ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FlushQuote0)
        r0.extend(FlushQuote1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:flush_quote][start_index] = r0

      r0
    end

    module IndentedQuote0
      def content
        elements[1]
      end
    end

    module IndentedQuote1
      def build
        { :type => :indented, :content => content.build }
      end
    end

    def _nt_indented_quote
      start_index = index
      if node_cache[:indented_quote].has_key?(index)
        cached = node_cache[:indented_quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('      ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('      ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(IndentedQuote0)
        r0.extend(IndentedQuote1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indented_quote][start_index] = r0

      r0
    end

  end

  class ParagraphParser < Treetop::Runtime::CompiledParser
    include Paragraph
  end

end
