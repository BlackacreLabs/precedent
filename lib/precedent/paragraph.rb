# encoding: utf-8
# Autogenerated from a Treetop grammar. Edits may be lost.


module Precedent
  module Paragraph
    include Treetop::Runtime

    def root
      @root ||= :paragraph
    end

    include Inline

    def _nt_paragraph
      start_index = index
      if node_cache[:paragraph].has_key?(index)
        cached = node_cache[:paragraph][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_footnote
      if r1
        r0 = r1
      else
        r2 = _nt_horizontal_rule
        if r2
          r0 = r2
        else
          r3 = _nt_ragged_left
          if r3
            r0 = r3
          else
            r4 = _nt_quote
            if r4
              r0 = r4
            else
              r5 = _nt_indented
              if r5
                r0 = r5
              else
                r6 = _nt_flush
                if r6
                  r0 = r6
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end

      node_cache[:paragraph][start_index] = r0

      r0
    end

    module HorizontalRule0
      def build
        { :type => :rule }
      end
    end

    def _nt_horizontal_rule
      start_index = index
      if node_cache[:horizontal_rule].has_key?(index)
        cached = node_cache[:horizontal_rule][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('* * *', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
        r0.extend(HorizontalRule0)
        @index += 5
      else
        terminal_parse_failure('* * *')
        r0 = nil
      end

      node_cache[:horizontal_rule][start_index] = r0

      r0
    end

    module RaggedLeft0
      def content
        elements[1]
      end
    end

    module RaggedLeft1
      def build
        { :type => :ragged_left,
		    :content => content.build }
      end
    end

    def _nt_ragged_left
      start_index = index
      if node_cache[:ragged_left].has_key?(index)
        cached = node_cache[:ragged_left][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('        ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('        ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(RaggedLeft0)
        r0.extend(RaggedLeft1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ragged_left][start_index] = r0

      r0
    end

    module Indented0
      def content
        elements[1]
      end
    end

    module Indented1
      def build
        { :type => :indented,
		    :content => content.build }
      end
    end

    def _nt_indented
      start_index = index
      if node_cache[:indented].has_key?(index)
        cached = node_cache[:indented][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('  ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('  ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Indented0)
        r0.extend(Indented1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indented][start_index] = r0

      r0
    end

    module Flush0
      def content
        elements[1]
      end
    end

    module Flush1
      def build
        { :type => :flush, :content => content.build }
      end
    end

    def _nt_flush
      start_index = index
      if node_cache[:flush].has_key?(index)
        cached = node_cache[:flush][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?(' ', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r2 = nil
      end
      if r2
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_inline
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Flush0)
        r0.extend(Flush1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:flush][start_index] = r0

      r0
    end

    module Footnote0
      def block_end
        elements[0]
      end

      def footnote_par
        elements[1]
      end
    end

    module Footnote1
      def marker
        elements[1]
      end

      def first_content
        elements[3]
      end

      def additional
        elements[4]
      end
    end

    module Footnote2
      def build
        {
          :type => :footnote,
          :marker => marker.text_value,
          :content => [
            { :type => :indented, :content => first_content.build }
          ] + additional.elements.map { |e|
				e.footnote_par.build
          }
        }
      end
    end

    def _nt_footnote
      start_index = index
      if node_cache[:footnote].has_key?(index)
        cached = node_cache[:footnote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('^', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('^')
        r1 = nil
      end
      s0 << r1
      if r1
        i2 = index
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        if r3
          r2 = r3
        else
          if has_terminal?('*', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('*')
            r5 = nil
          end
          if r5
            r2 = r5
          else
            if has_terminal?('††', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('††')
              r6 = nil
            end
            if r6
              r2 = r6
            else
              if has_terminal?('†', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('†')
                r7 = nil
              end
              if r7
                r2 = r7
              else
                if has_terminal?('‡', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('‡')
                  r8 = nil
                end
                if r8
                  r2 = r8
                else
                  @index = i2
                  r2 = nil
                end
              end
            end
          end
        end
        s0 << r2
        if r2
          s9, i9 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r10 = nil
            end
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s0 << r9
          if r9
            r11 = _nt_inline
            s0 << r11
            if r11
              s12, i12 = [], index
              loop do
                i13, s13 = index, []
                r14 = _nt_block_end
                s13 << r14
                if r14
                  r15 = _nt_footnote_par
                  s13 << r15
                end
                if s13.last
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  r13.extend(Footnote0)
                else
                  @index = i13
                  r13 = nil
                end
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s0 << r12
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Footnote1)
        r0.extend(Footnote2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:footnote][start_index] = r0

      r0
    end

    module FootnotePar0
      def content
        elements[2]
      end

    end

    module FootnotePar1
			def build
				{ :type => :indented,
				  :content => content.build }
			end
    end

    def _nt_footnote_par
      start_index = index
      if node_cache[:footnote_par].has_key?(index)
        cached = node_cache[:footnote_par][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('^', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('^')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        if s2.empty?
          @index = i2
          r2 = nil
        else
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          r4 = _nt_inline
          s0 << r4
          if r4
            if has_terminal?("\n", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\n")
              r5 = nil
            end
            s0 << r5
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FootnotePar0)
        r0.extend(FootnotePar1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:footnote_par][start_index] = r0

      r0
    end

    module Quote0
      def block_end
        elements[0]
      end

      def elem
        elements[1]
      end
    end

    module Quote1
      def first
        elements[0]
      end

      def additional
        elements[1]
      end
    end

    module Quote2
      def build
        {
          :type => :quote,
          :content => [first.build] + additional.elements.map { |e|
				e.elem.build
          }
        }
      end
    end

    def _nt_quote
      start_index = index
      if node_cache[:quote].has_key?(index)
        cached = node_cache[:quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_indented_rule
      if r2
        r1 = r2
      else
        r3 = _nt_indented_quote
        if r3
          r1 = r3
        else
          r4 = _nt_flush_quote
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      s0 << r1
      if r1
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          r7 = _nt_block_end
          s6 << r7
          if r7
            i8 = index
            r9 = _nt_indented_rule
            if r9
              r8 = r9
            else
              r10 = _nt_indented_quote
              if r10
                r8 = r10
              else
                r11 = _nt_flush_quote
                if r11
                  r8 = r11
                else
                  @index = i8
                  r8 = nil
                end
              end
            end
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Quote0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Quote1)
        r0.extend(Quote2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:quote][start_index] = r0

      r0
    end

    module IndentedRule0
      def build
        { :type => :rule }
      end
    end

    def _nt_indented_rule
      start_index = index
      if node_cache[:indented_rule].has_key?(index)
        cached = node_cache[:indented_rule][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('    * * *', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 9))
        r0.extend(IndentedRule0)
        @index += 9
      else
        terminal_parse_failure('    * * *')
        r0 = nil
      end

      node_cache[:indented_rule][start_index] = r0

      r0
    end

    module FlushQuote0
      def content
        elements[1]
      end
    end

    module FlushQuote1
      def build
        { :type => :flush,
		    :content => content.build }
      end
    end

    def _nt_flush_quote
      start_index = index
      if node_cache[:flush_quote].has_key?(index)
        cached = node_cache[:flush_quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('    ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('    ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FlushQuote0)
        r0.extend(FlushQuote1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:flush_quote][start_index] = r0

      r0
    end

    module IndentedQuote0
      def content
        elements[1]
      end
    end

    module IndentedQuote1
      def build
        { :type => :indented,
		    :content => content.build }
      end
    end

    def _nt_indented_quote
      start_index = index
      if node_cache[:indented_quote].has_key?(index)
        cached = node_cache[:indented_quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('      ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('      ')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_inline
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(IndentedQuote0)
        r0.extend(IndentedQuote1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indented_quote][start_index] = r0

      r0
    end

  end

  class ParagraphParser < Treetop::Runtime::CompiledParser
    include Paragraph
  end

end
