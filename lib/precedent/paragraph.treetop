#encoding: UTF-8
require File.dirname(__FILE__) + '/inline'

module Precedent
  grammar Paragraph
    include Inline

    rule paragraph
      # Note that paragraph types with longer initial indentation (e.g.
      # quote paragraphs) _must_ precede those with shorter indentation
      # (e.g. indented body pagaraphs) in this list.
      footnote /
      horizontal_rule /
      ragged_left /
      quote /
      indented /
      flush
    end

    rule horizontal_rule
      '* * *'
      {
        def build
          { :type => :rule }
        end
      }
    end

    rule ragged_left
      '        ' content:inline
      {
        def build
          { :type => :ragged_left,
		    :content => content.build }
        end
      }
    end

    rule indented
      '  ' content:inline
      {
        def build
          { :type => :indented,
		    :content => content.build }
        end
      }
    end

    rule flush
      !' ' content:inline
      {
        def build
          { :type => :flush, :content => content.build }
        end
      }
    end

    rule footnote
      '^'
	  marker:([0-9]+ / '*' / 'â€ ' / 'â€¡')
	  ' '+
	  first_content:inline
	  additional:(block_end footnote_par)*
      {
        def build
          {
            :type => :footnote,
            :marker => marker.text_value,
            :content => [
              { :type => :indented, :content => first_content.build }
            ] + additional.elements.map { |e|
				e.footnote_par.build
            }
          }
        end
      }
    end

	rule footnote_par
		'^' ' '+ content:inline "\n"
		{
			def build
				{ :type => :indented,
				  :content => content.build }
			end
		}
	end

    rule quote
	  first:(indented_rule / indented_quote / flush_quote)
      additional:(block_end elem:(indented_rule / indented_quote / flush_quote))*
      {
        def build
          {
            :type => :quote,
            :content => [first.build] + additional.elements.map { |e|
				e.elem.build
            }
          }
        end
      }
    end

    rule indented_rule
      '    * * *'
      {
        def build
          { :type => :rule }
        end
      }
    end

    rule flush_quote
      '    ' content:inline
      {
        def build
          { :type => :flush,
		    :content => content.build }
        end
      }
    end
    
    rule indented_quote
      '      ' content:inline
      {
        def build
          { :type => :indented,
		    :content => content.build }
        end
      }
    end
  end
end
