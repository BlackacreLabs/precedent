module Precedent
  grammar Inline
    rule inline
      first:inline_element
      subsequent:(single_newline? inline_element)*
      {
        def build
          elems = subsequent.elements.map(&:build).flatten
          # Members of `subsequent` come in [nil, Node] lists when there
          # is no preceding line break. The car values can't be ignored,
          # as we need to convert newlines to spaces when they occur.
          ret = elems.reduce([first.build]) do |mem, e|
            last = mem.last
            # Start the output list with the first element
            if e.nil?
              mem
            # Concatenate contiguous strings
            elsif last.is_a?(String) && e.is_a?(String)
              mem + [mem.pop + e]
            else # Hash
              mem + [e]
            end
          end
          # If there is just one content element, give the element
          # rather than a one-element list.
          ret.count == 1 ? ret.first : ret
        end
      }
    end

    rule inline_element
      word /
      space /
      emphasis /
      smallcaps /
      citation /
      page_break /
      reference
    end

    rule smallcaps
      '<<' content:inline '>>'
      {
        def build
          { :type => :smallcaps,
            :content => content.build }
        end
      }
    end

    rule emphasis
      '//' content:inline '//'
      {
        def build
          { :type => :emphasis,
            :content => content.build }
        end
      }
    end

    rule citation
      '{{' content:inline '}}'
      {
        def build
          { :type => :citation,
            :content => content.build }
        end
      }
    end

    rule page_break
      '@@' page:[0-9]+ '@@'
      {
        def build
          { :type => :break,
            :page => page.text_value.to_i }
        end
      }
    end

    rule reference
      '[[' marker:[0-9*†‡]+ ']]'
      {
        def build
          { :type => :reference,
            :marker => marker.text_value }
        end
      }
    end

    rule single_newline
      "\n"
      {
        def build
          ' '
        end
      }
    end

    rule word
      [a-zA-Z.]+
      {
        def build
          text_value
        end
      }
    end

    rule space
      ' '
      {
        def build
          ' '
        end 
      }
    end
  end
end
